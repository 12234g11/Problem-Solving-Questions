Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer.
 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)
Problem Link -> https://leetcode.com/problems/product-of-array-except-self/description/

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> answer(n);
        answer[0] = 1;
        for (int i = 1; i < n; i++)
        {
            answer[i] = nums[i - 1] * answer[i - 1];
        }
        int r = 1;
        for (int i = n - 1; i >= 0; i--)
        {
            answer[i] *= r;
            r *= nums[i];
        }
        return answer;
    }
};

_______________________________________________________________________________________________________________________________________________________________________

Intuition
My first thought was that for each index i, I need the product of all elements except nums[i]. At first, it seems natural to compute the total product and divide by nums[i], but since division is not allowed, I had to look for an alternative approach.

Then I realized I can split the product into two parts:

The product of all elements to the left of index i

The product of all elements to the right of index i

Multiplying these two gives the desired result for index i.

So the idea is to:

Traverse the array once from left to right, storing the left products.

Traverse from right to left, multiplying each stored value with the right-side product.

This allows us to build the result in O(n) time and O(1) extra space (excluding the output array).

Approach
To solve the problem without using division and in O(n) time, I use a two-pass approach based on prefix and suffix products.

First Pass – Left Products (Prefix):
I initialize an output array answer where answer[i] will hold the product of all elements to the left of index i.
I start with answer[0] = 1 (since there are no elements to the left), and for each i > 0, I set:
answer[i] = answer[i - 1] * nums[i - 1].

Second Pass – Right Products (Suffix):
I use a variable right to store the product of elements to the right of index i, initialized to 1.
I traverse the array from right to left, and at each index i, I update:
answer[i] *= right, then update right *= nums[i].

This way, for each index i, answer[i] will be:

product of all elements to the left of i × product of all elements to the right of i
No extra space is used except the output array, which is allowed by the problem statement.

Complexity
Time complexity:
O(N)
Space complexity:
O(1)

