Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.

 

Example 1:

Input: s = "III"
Output: 3
Explanation: III = 3.
Example 2:

Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 3:

Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
 

Constraints:

1 <= s.length <= 15
s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').
It is guaranteed that s is a valid roman numeral in the range [1, 3999].

Problem Link-> https://leetcode.com/problems/roman-to-integer/description/
_______________________________________________________________________________________________________________
Intuition
The Roman numeral system uses combinations of letters to represent numbers. Normally, the letters are read left
to right, and their values are added.
However, when a smaller-value letter comes before a larger-value one, it indicates subtraction.

Approach
I used a mapping (dictionary) of Roman numeral characters and their corresponding integer values, including both:

Single-character values (like "I", "V", "X", etc.)
Two-character special cases (like "IV", "IX", "CM", etc.)
I loop through the input string s from left to right.

At each step, I try to check if a two-character substring (current and next letter) exists in the map.

If it exists (like "IV"), I add its value to the result and skip the next character.
If not, I fall back to using the one-character value (like just "I").
I return the total sum after parsing the full string.

Complexity
Time complexity:
O(N)
Space complexity:
O(1)