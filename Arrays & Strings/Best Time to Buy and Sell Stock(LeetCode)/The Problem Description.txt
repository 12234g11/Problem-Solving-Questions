You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104

Problem Link-> https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/
_____________________________________________________________________________________________________________________________
Intuition
The idea is to buy at the lowest price so far and sell at the next price, updating the profit if it's the maximum seen.

We don’t need to check every possible pair; instead, just keep track of the minimum price up to that point and calculate the potential profit if we sold today.

Approach
Start by assuming the minimum price is the first day’s price.

For every subsequent price:

Calculate the profit if we sell today (price - themin).

Update res if this profit is greater than the current maximum.

Update themin if today's price is lower.

Return the highest profit found; if no profit is possible, return 0.

Complexity
Time complexity:
O(n)
Space complexity:
O(1) 
My code:
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int res = 0 , t = 0;
        int themin = prices[0];
        for (int i = 0; i < prices.size()-1; i++)
        {
            t = prices[i + 1] - themin;
            themin = min(themin, prices[i + 1]);
            if (t > res) res = t;
        }
        if (res <= 0) {
            return 0;
        }
        else {
            return res;
        }
    }
};